"use strict";

define(function () {
  "use strict";

  return "attribute vec3 position;\nattribute vec2 textureCoordinates;\nuniform mat4 u_modelViewMatrix;\nuniform bool u_bFlatten;\nuniform sampler2D u_polygonTexture;\nuniform vec4 u_polygonBounds;\nvarying vec2 v_textureCoordinates;\nvarying vec3 v_vertex;\nbool isPointInBound(vec4 point, vec4 bounds)\n{\nreturn (point.x>bounds.x&&point.x<bounds.z&&point.y<bounds.y&&point.y>bounds.w);\n}\nfloat unpackDepth(const in vec4 rgba_depth)\n{\nconst vec4 bitShifts = vec4(1.0, 1.0 / 255.0, 1.0 / (255.0 * 255.0), 1.0 / (255.0 * 255.0 * 255.0));\nfloat depth=dot(rgba_depth, bitShifts);\nreturn depth;\n}\nvoid main()\n{\nvec4 viewPos = vec4(position.xyz,1.0);\nv_vertex = viewPos.xyz;\nif (isPointInBound(viewPos, u_polygonBounds)){\nvec2 texCoord;\ntexCoord.x = (viewPos.x-u_polygonBounds.x)/(u_polygonBounds.z-u_polygonBounds.x);\ntexCoord.y = (viewPos.y-u_polygonBounds.w)/(u_polygonBounds.y-u_polygonBounds.w);\nfloat texelSize = 1.0/4096.0;\nfloat depth0 = unpackDepth(texture2D(u_polygonTexture, texCoord.xy));\nfloat depth1 = unpackDepth(texture2D(u_polygonTexture, texCoord.xy + vec2(-texelSize,0.0)));\nfloat depth2 = unpackDepth(texture2D(u_polygonTexture, texCoord.xy + vec2(texelSize,0.0)));\nfloat depth3 = unpackDepth(texture2D(u_polygonTexture, texCoord.xy + vec2(0.0,-texelSize)));\nfloat depth4 = unpackDepth(texture2D(u_polygonTexture, texCoord.xy + vec2(0.0,texelSize)));\nfloat depth =  max( max( max( max( depth0, depth1),depth2), depth3), depth4);\nfloat z = (depth - 0.5)*2.0*5000.0;\nif(abs(depth) > 0.00001){\nviewPos.z = z;\n}\n}\ngl_Position = czm_projection* u_modelViewMatrix* viewPos;\nv_textureCoordinates = textureCoordinates;\n}\n";
});