define(["./Cartesian3","./Check","./defined","./DeveloperError","./freezeObject","./Math","./Matrix4"],function(e,n,t,o,r,a,i){"use strict";function l(t,r){if(n.typeOf.object("normal",t),!a.equalsEpsilon(e.magnitude(t),1,a.EPSILON6))throw new o("normal must be normalized.");n.typeOf.number("distance",r),this.normal=e.clone(t),this.distance=r}l.fromPointNormal=function(r,i,c){if(n.typeOf.object("point",r),n.typeOf.object("normal",i),!a.equalsEpsilon(e.magnitude(i),1,a.EPSILON6))throw new o("normal must be normalized.");var m=-e.dot(i,r);return t(c)?(e.clone(i,c.normal),c.distance=m,c):new l(i,m)};var c=new e;l.fromCartesian4=function(r,i){n.typeOf.object("coefficients",r);var m=e.fromCartesian4(r,c),f=r.w;if(!a.equalsEpsilon(e.magnitude(m),1,a.EPSILON6))throw new o("normal must be normalized.");return t(i)?(e.clone(m,i.normal),i.distance=f,i):new l(m,f)},l.getPointDistance=function(t,o){return n.typeOf.object("plane",t),n.typeOf.object("point",o),e.dot(t.normal,o)+t.distance};var m=new e;l.projectPointOntoPlane=function(o,r,a){n.typeOf.object("plane",o),n.typeOf.object("point",r),t(a)||(a=new e);var i=l.getPointDistance(o,r),c=e.multiplyByScalar(o.normal,i,m);return e.subtract(r,c,a)};var f=new e;return l.transform=function(t,o,r){return n.typeOf.object("plane",t),n.typeOf.object("transform",o),i.multiplyByPointAsVector(o,t.normal,c),e.normalize(c,c),e.multiplyByScalar(t.normal,-t.distance,f),i.multiplyByPoint(o,f,f),l.fromPointNormal(f,c,r)},l.clone=function(o,r){return n.typeOf.object("plane",o),t(r)?(e.clone(o.normal,r.normal),r.distance=o.distance,r):new l(o.normal,o.distance)},l.equals=function(t,o){return n.typeOf.object("left",t),n.typeOf.object("right",o),t.distance===o.distance&&e.equals(t.normal,o.normal)},l.ORIGIN_XY_PLANE=r(new l(e.UNIT_Z,0)),l.ORIGIN_YZ_PLANE=r(new l(e.UNIT_X,0)),l.ORIGIN_ZX_PLANE=r(new l(e.UNIT_Y,0)),l});