define(["../../Core/defined","../../Core/DeveloperError","../../Core/Cartesian3","./support/MapUtils"],function(e,t,i,r){function o(i){if(!e(i))throw new t("viewer is required.");this.viewer=i,this.holeWallEntity=[],this.bottomEntity=[]}return o.prototype.create=function(o){if(!e(o.points))throw new t("points is required.");if(!e(o.holeHeights))throw new t("holeHeights is required.");if(!e(o.materials))throw new t("materials is required.");for(var n=new r(this.viewer),a=o.points,h=o.materials,s=[],l=[],g=[],v=0;v<a.length;v++){var f;f=v===a.length-1?n.getDengLngLat(a[v],a[0],50):n.getDengLngLat(a[v],a[v+1],50),s.push(f)}for(var m=0;m<s.length;m++){for(var p=[],c=s[m],u=0;u<h.length;u++){var w=o.holeHeights[m][u];p[u]=[];for(var y=0;y<c.length;y++){var d=0===y||y===c.length-1?0:1*Math.random()+1;p[u].push([c[y][0],c[y][1],c[y][2]-w-d])}}l.push(p)}for(var E=l.slice(),H=0;H<E.length;H++){var D=E[H][h.length-1].slice();D.shift(),g=g.concat(D)}for(var W=0;W<s.length;W++)for(var b=s[W].slice(),q=l[W],C=0;C<h.length;C++){var L=(0===C?b.reverse():q[C-1].slice().reverse()).concat(q[C]),A=this.viewer.entities.add({name:"modelWall",polygon:{hierarchy:i.fromDegreesArrayHeights(L.flat()),perPositionHeight:!0,material:h[C]}});this.holeWallEntity.push(A)}this.bottomEntity.push(this.viewer.entities.add({name:"modelBottom",polygon:{hierarchy:i.fromDegreesArrayHeights(g.flat()),perPositionHeight:!0,material:h[h.length-1]}}))},o.prototype.removeAll=function(){var e=this;e.holeWallEntity.map(function(t){e.viewer.entities.remove(t)}),this.bottomEntity.map(function(t){e.viewer.entities.remove(t)}),e.holeWallEntity=[],e.bottomEntity=[]},o});