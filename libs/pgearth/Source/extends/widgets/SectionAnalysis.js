define(["../../DataSources/PolylineGlowMaterialProperty","../../Core/Color","../../Core/defined","../../Scene/GroundPrimitive","../../Scene/PolylineMaterialAppearance","../../Scene/Material","../../Core/GeometryInstance","../../Core/CorridorGeometry","../../DataSources/CallbackProperty","../../Core/ScreenSpaceEventHandler","../../Core/ScreenSpaceEventType","./support/PickGlobe","../../Core/Cartesian3","../../Core/Cartographic","../../Core/Ellipsoid","../../Scene/PerInstanceColorAppearance","../../Core/VertexFormat","../../Core/ColorGeometryInstanceAttribute"],function(e,i,t,o,n,r,s,a,l,p,c,h,d,w,m,v,y,f){function u(n,r){this.viewer=n,this.scene=this.viewer.scene,this.leftpoints=[],this.poinsTemp=[],this.isDrawLine=!1,this.callBack=r,this.heights=[];var d=this;this.polylineTemp=this.viewer.entities.add({name:"tempLine",polyline:{positions:new l(function(){return d.poinsTemp},!1),width:5,material:new e({glowPower:.2,color:i.RED})}});var w=0;this.pickGlobe=new h(n),this.handler=new p(this.scene.canvas),this.handler.setInputAction(function(e){var i=d.pickGlobe.pickGlobe(e.position);t(i)&&(0===w?(d.isDrawLine=!0,d.leftpoints[0]=i,d.leftpoints[1]=i,d.poinsTemp[0]=i,w++):(d.leftpoints[1]=i,d.polyline=d.viewer.scene.primitives.add(new o({geometryInstances:new s({geometry:new a({vertexFormat:y.POSITION_ONLY,positions:d.leftpoints,width:5}),attributes:{color:new f(0,1,1,.5)},id:"sectionAnalysis"})})),d.addSectionAnalysis(d.leftpoints[0],d.leftpoints[1],r),d.leftpoints=new Array(2),w=0,d.isDrawLine=!1,d.viewer.entities.remove(d.polylineTemp)))},c.LEFT_CLICK),this.handler.setInputAction(function(e){var i=d.pickGlobe.pickGlobe(e.endPosition);t(i)&&d.isDrawLine&&t(d.poinsTemp[0])&&(d.poinsTemp[1]=i)},c.MOUSE_MOVE)}return u.prototype.addSectionAnalysis=function(e,i,t){this.scene.clampToHeightSupported||console.log("This browser does not support clampToHeightMostDetailed.");var o,n=this,r=d.distance(e,i);o=Math.floor(r>=1e4?r/100:r<=100?r/2:r/10);for(var s=new Array(o),a=0;a<o;++a){var l=a/(o-1);s[a]=d.lerp(e,i,l,new d)}n.viewer.scene.clampToHeightMostDetailed(s).then(function(r){for(var s=0;s<o;++s){var a=w.fromCartesian(r[s],n.scene.globe.ellipsoid).height;n.heights.push(a)}t&&t(n.heights,e,i)})},u.prototype.clear=function(){this.leftpoints=[],this.poinsTemp=[],this.isDrawLine=!1,this.viewer.scene.groundPrimitives.remove(this.polyline),!this.handler.isDestroyed()&&this.handler.destroy()},u});