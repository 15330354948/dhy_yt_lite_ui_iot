define(["./defined","./DeveloperError","./freezeObject","./Math","./WebGLConstants"],function(e,r,t,n,i){"use strict";var a={UNSIGNED_BYTE:i.UNSIGNED_BYTE,UNSIGNED_SHORT:i.UNSIGNED_SHORT,UNSIGNED_INT:i.UNSIGNED_INT,getSizeInBytes:function(e){switch(e){case a.UNSIGNED_BYTE:return Uint8Array.BYTES_PER_ELEMENT;case a.UNSIGNED_SHORT:return Uint16Array.BYTES_PER_ELEMENT;case a.UNSIGNED_INT:return Uint32Array.BYTES_PER_ELEMENT}throw new r("indexDatatype is required and must be a valid IndexDatatype constant.")},fromSizeInBytes:function(e){switch(e){case 2:return a.UNSIGNED_SHORT;case 4:return a.UNSIGNED_INT;case 1:return a.UNSIGNED_BYTE;default:throw new r("Size in bytes cannot be mapped to an IndexDatatype")}},validate:function(r){return e(r)&&(r===a.UNSIGNED_BYTE||r===a.UNSIGNED_SHORT||r===a.UNSIGNED_INT)},createTypedArray:function(t,i){if(!e(t))throw new r("numberOfVertices is required.");return t>=n.SIXTY_FOUR_KILOBYTES?new Uint32Array(i):new Uint16Array(i)},createTypedArrayFromArrayBuffer:function(t,i,a,E){if(!e(t))throw new r("numberOfVertices is required.");if(!e(i))throw new r("sourceArray is required.");if(!e(a))throw new r("byteOffset is required.");return t>=n.SIXTY_FOUR_KILOBYTES?new Uint32Array(i,a,E):new Uint16Array(i,a,E)}};return t(a)});