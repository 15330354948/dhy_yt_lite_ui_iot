define(["./arrayFill","./BoundingSphere","./Cartesian2","./Cartesian3","./Check","./ComponentDatatype","./CylinderGeometryLibrary","./defaultValue","./defined","./DeveloperError","./Geometry","./GeometryAttribute","./GeometryAttributes","./GeometryOffsetAttribute","./IndexDatatype","./PrimitiveType"],function(t,e,i,r,o,n,s,a,u,f,p,d,b,m,l,c){"use strict";var y=new i;function _(t){var e=(t=a(t,a.EMPTY_OBJECT)).length,i=t.topRadius,r=t.bottomRadius,n=a(t.slices,128),s=Math.max(a(t.numberOfVerticalLines,16),0);if(o.typeOf.number("options.positions",e),o.typeOf.number("options.topRadius",i),o.typeOf.number("options.bottomRadius",r),o.typeOf.number.greaterThanOrEquals("options.slices",n,3),u(t.offsetAttribute)&&t.offsetAttribute===m.TOP)throw new f("GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.");this._length=e,this._topRadius=i,this._bottomRadius=r,this._slices=n,this._numberOfVerticalLines=s,this._offsetAttribute=t.offsetAttribute,this._workerName="createCylinderOutlineGeometry"}_.packedLength=6,_.pack=function(t,e,i){return o.typeOf.object("value",t),o.defined("array",e),i=a(i,0),e[i++]=t._length,e[i++]=t._topRadius,e[i++]=t._bottomRadius,e[i++]=t._slices,e[i++]=t._numberOfVerticalLines,e[i]=a(t._offsetAttribute,-1),e};var h={length:void 0,topRadius:void 0,bottomRadius:void 0,slices:void 0,numberOfVerticalLines:void 0,offsetAttribute:void 0};return _.unpack=function(t,e,i){o.defined("array",t),e=a(e,0);var r=t[e++],n=t[e++],s=t[e++],f=t[e++],p=t[e++],d=t[e];return u(i)?(i._length=r,i._topRadius=n,i._bottomRadius=s,i._slices=f,i._numberOfVerticalLines=p,i._offsetAttribute=-1===d?void 0:d,i):(h.length=r,h.topRadius=n,h.bottomRadius=s,h.slices=f,h.numberOfVerticalLines=p,h.offsetAttribute=-1===d?void 0:d,new _(h))},_.createGeometry=function(o){var a=o._length,f=o._topRadius,_=o._bottomRadius,h=o._slices,v=o._numberOfVerticalLines;if(!(a<=0||f<0||_<0||0===f&&0===_)){var O,A=2*h,R=s.computePositions(a,f,_,h,!1),g=2*h;if(v>0){var w=Math.min(v,h);O=Math.round(h/w),g+=w}var L,E=l.createTypedArray(A,2*g),G=0;for(L=0;L<h-1;L++)E[G++]=L,E[G++]=L+1,E[G++]=L+h,E[G++]=L+1+h;if(E[G++]=h-1,E[G++]=0,E[G++]=h+h-1,E[G++]=h,v>0)for(L=0;L<h;L+=O)E[G++]=L,E[G++]=L+h;var T=new b;T.position=new d({componentDatatype:n.DOUBLE,componentsPerAttribute:3,values:R}),y.x=.5*a,y.y=Math.max(_,f);var V=new e(r.ZERO,i.magnitude(y));if(u(o._offsetAttribute)){a=R.length;var C=new Uint8Array(a/3),D=o._offsetAttribute===m.NONE?0:1;t(C,D),T.applyOffset=new d({componentDatatype:n.UNSIGNED_BYTE,componentsPerAttribute:1,values:C})}return new p({attributes:T,indices:E,primitiveType:c.LINES,boundingSphere:V,offsetAttribute:o._offsetAttribute})}},_});