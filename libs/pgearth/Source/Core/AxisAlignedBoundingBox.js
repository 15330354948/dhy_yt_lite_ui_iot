define(["./Cartesian3","./Check","./defaultValue","./defined","./Intersect"],function(n,e,m,t,i){"use strict";function u(e,i,u){this.minimum=n.clone(m(e,n.ZERO)),this.maximum=n.clone(m(i,n.ZERO)),u=t(u)?n.clone(u):n.midpoint(this.minimum,this.maximum,new n),this.center=u}u.fromPoints=function(e,m){if(t(m)||(m=new u),!t(e)||0===e.length)return m.minimum=n.clone(n.ZERO,m.minimum),m.maximum=n.clone(n.ZERO,m.maximum),m.center=n.clone(n.ZERO,m.center),m;for(var i=e[0].x,a=e[0].y,r=e[0].z,c=e[0].x,o=e[0].y,l=e[0].z,s=e.length,x=1;x<s;x++){var h=e[x],f=h.x,d=h.y,y=h.z;i=Math.min(f,i),c=Math.max(f,c),a=Math.min(d,a),o=Math.max(d,o),r=Math.min(y,r),l=Math.max(y,l)}var p=m.minimum;p.x=i,p.y=a,p.z=r;var E=m.maximum;return E.x=c,E.y=o,E.z=l,m.center=n.midpoint(p,E,m.center),m},u.clone=function(e,m){if(t(e))return t(m)?(m.minimum=n.clone(e.minimum,m.minimum),m.maximum=n.clone(e.maximum,m.maximum),m.center=n.clone(e.center,m.center),m):new u(e.minimum,e.maximum,e.center)},u.equals=function(e,m){return e===m||t(e)&&t(m)&&n.equals(e.center,m.center)&&n.equals(e.minimum,m.minimum)&&n.equals(e.maximum,m.maximum)};var a=new n;return u.intersectPlane=function(m,t){e.defined("box",m),e.defined("plane",t),a=n.subtract(m.maximum,m.minimum,a);var u=n.multiplyByScalar(a,.5,a),r=t.normal,c=u.x*Math.abs(r.x)+u.y*Math.abs(r.y)+u.z*Math.abs(r.z),o=n.dot(m.center,r)+t.distance;return o-c>0?i.INSIDE:o+c<0?i.OUTSIDE:i.INTERSECTING},u.prototype.clone=function(n){return u.clone(this,n)},u.prototype.intersectPlane=function(n){return u.intersectPlane(this,n)},u.prototype.equals=function(n){return u.equals(this,n)},u});