define(["./BoundingSphere","./Cartesian3","./Check","./defaultValue","./defined","./defineProperties","./Rectangle"],function(e,i,t,n,o,a,r){"use strict";function c(e,n){t.typeOf.object("ellipsoid",e),this._ellipsoid=e,this._cameraPosition=new i,this._cameraPositionInScaledSpace=new i,this._distanceToLimbInScaledSpaceSquared=0,o(n)&&(this.cameraPosition=n)}a(c.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},cameraPosition:{get:function(){return this._cameraPosition},set:function(e){var t=this._ellipsoid.transformPositionToScaledSpace(e,this._cameraPositionInScaledSpace),n=i.magnitudeSquared(t)-1;i.clone(e,this._cameraPosition),this._cameraPositionInScaledSpace=t,this._distanceToLimbInScaledSpaceSquared=n}}});var s=new i;c.prototype.isPointVisible=function(e){var i=this._ellipsoid.transformPositionToScaledSpace(e,s);return this.isScaledSpacePointVisible(i)},c.prototype.isScaledSpacePointVisible=function(e){var t=this._cameraPositionInScaledSpace,n=this._distanceToLimbInScaledSpaceSquared,o=i.subtract(e,t,s),a=-i.dot(o,t);return!(n<0?a>0:a>n&&a*a/i.magnitudeSquared(o)>n)},c.prototype.computeHorizonCullingPoint=function(e,n,a){t.typeOf.object("directionToPoint",e),t.defined("positions",n),o(a)||(a=new i);for(var r=this._ellipsoid,c=h(r,e),s=0,l=0,u=n.length;l<u;++l){var d=m(r,n[l],c);s=Math.max(s,d)}return S(c,s,a)};var l=new i;c.prototype.computeHorizonCullingPointFromVertices=function(e,a,r,c,s){t.typeOf.object("directionToPoint",e),t.defined("vertices",a),t.typeOf.number("stride",r),o(s)||(s=new i),c=n(c,i.ZERO);for(var u=this._ellipsoid,d=h(u,e),p=0,f=0,P=a.length;f<P;f+=r){l.x=a[f]+c.x,l.y=a[f+1]+c.y,l.z=a[f+2]+c.z;var g=m(u,l,d);p=Math.max(p,g)}return S(d,p,s)};var u=[];c.prototype.computeHorizonCullingPointFromRectangle=function(n,o,a){t.typeOf.object("rectangle",n);var c=r.subsample(n,o,0,u),s=e.fromPoints(c);if(!(i.magnitude(s.center)<.1*o.minimumRadius))return this.computeHorizonCullingPoint(s.center,c,a)};var d=new i,p=new i;function m(e,t,n){var o=e.transformPositionToScaledSpace(t,d),a=i.magnitudeSquared(o),r=Math.sqrt(a),c=i.divideByScalar(o,r,p);a=Math.max(1,a);var s=1/(r=Math.max(1,r));return 1/(i.dot(c,n)*s-i.magnitude(i.cross(c,n,c))*(Math.sqrt(a-1)*s))}function S(e,t,n){if(!(t<=0||t===1/0||t!=t))return i.multiplyByScalar(e,t,n)}var f=new i;function h(e,t){return i.equals(t,i.ZERO)?t:(e.transformPositionToScaledSpace(t,f),i.normalize(f,f))}return c});