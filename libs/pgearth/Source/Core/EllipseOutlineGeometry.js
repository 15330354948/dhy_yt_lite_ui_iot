define(["./arrayFill","./BoundingSphere","./Cartesian3","./ComponentDatatype","./defaultValue","./defined","./DeveloperError","./EllipseGeometryLibrary","./Ellipsoid","./Geometry","./GeometryAttribute","./GeometryAttributes","./GeometryOffsetAttribute","./IndexDatatype","./Math","./PrimitiveType"],function(e,t,i,r,n,o,a,s,u,l,c,d,f,h,p,m){"use strict";var _=new i,A=new i;var g=new t,b=new t;function v(e){var t=(e=n(e,n.EMPTY_OBJECT)).center,r=n(e.ellipsoid,u.WGS84),s=e.semiMajorAxis,l=e.semiMinorAxis,c=n(e.granularity,p.RADIANS_PER_DEGREE);if(!o(t))throw new a("center is required.");if(!o(s))throw new a("semiMajorAxis is required.");if(!o(l))throw new a("semiMinorAxis is required.");if(s<l)throw new a("semiMajorAxis must be greater than or equal to the semiMinorAxis.");if(c<=0)throw new a("granularity must be greater than zero.");var d=n(e.height,0),f=n(e.extrudedHeight,d);this._center=i.clone(t),this._semiMajorAxis=s,this._semiMinorAxis=l,this._ellipsoid=u.clone(r),this._rotation=n(e.rotation,0),this._height=Math.max(f,d),this._granularity=c,this._extrudedHeight=Math.min(f,d),this._numberOfVerticalLines=Math.max(n(e.numberOfVerticalLines,16),0),this._offsetAttribute=e.offsetAttribute,this._workerName="createEllipseOutlineGeometry"}v.packedLength=i.packedLength+u.packedLength+8,v.pack=function(e,t,r){if(!o(e))throw new a("value is required");if(!o(t))throw new a("array is required");return r=n(r,0),i.pack(e._center,t,r),r+=i.packedLength,u.pack(e._ellipsoid,t,r),r+=u.packedLength,t[r++]=e._semiMajorAxis,t[r++]=e._semiMinorAxis,t[r++]=e._rotation,t[r++]=e._height,t[r++]=e._granularity,t[r++]=e._extrudedHeight,t[r++]=e._numberOfVerticalLines,t[r]=n(e._offsetAttribute,-1),t};var y=new i,x=new u,w={center:y,ellipsoid:x,semiMajorAxis:void 0,semiMinorAxis:void 0,rotation:void 0,height:void 0,granularity:void 0,extrudedHeight:void 0,numberOfVerticalLines:void 0,offsetAttribute:void 0};return v.unpack=function(e,t,r){if(!o(e))throw new a("array is required");t=n(t,0);var s=i.unpack(e,t,y);t+=i.packedLength;var l=u.unpack(e,t,x);t+=u.packedLength;var c=e[t++],d=e[t++],f=e[t++],h=e[t++],p=e[t++],m=e[t++],_=e[t++],A=e[t];return o(r)?(r._center=i.clone(s,r._center),r._ellipsoid=u.clone(l,r._ellipsoid),r._semiMajorAxis=c,r._semiMinorAxis=d,r._rotation=f,r._height=h,r._granularity=p,r._extrudedHeight=m,r._numberOfVerticalLines=_,r._offsetAttribute=-1===A?void 0:A,r):(w.height=h,w.extrudedHeight=m,w.granularity=p,w.rotation=f,w.semiMajorAxis=c,w.semiMinorAxis=d,w.numberOfVerticalLines=_,w.offsetAttribute=-1===A?void 0:A,new v(w))},v.createGeometry=function(a){if(!(a._semiMajorAxis<=0||a._semiMinorAxis<=0)){var u=a._height,v=a._extrudedHeight,y=!p.equalsEpsilon(u,v,0,p.EPSILON2);a._center=a._ellipsoid.scaleToGeodeticSurface(a._center,a._center);var x,w={center:a._center,semiMajorAxis:a._semiMajorAxis,semiMinorAxis:a._semiMinorAxis,ellipsoid:a._ellipsoid,rotation:a._rotation,height:u,granularity:a._granularity,numberOfVerticalLines:a._numberOfVerticalLines};if(y)w.extrudedHeight=v,w.offsetAttribute=a._offsetAttribute,x=function(a){var u=a.center,l=a.ellipsoid,m=a.semiMajorAxis,A=i.multiplyByScalar(l.geodeticSurfaceNormal(u,_),a.height,_);g.center=i.add(u,A,g.center),g.radius=m,A=i.multiplyByScalar(l.geodeticSurfaceNormal(u,A),a.extrudedHeight,A),b.center=i.add(u,A,b.center),b.radius=m;var v=s.computeEllipsePositions(a,!1,!0).outerPositions,y=new d({position:new c({componentDatatype:r.DOUBLE,componentsPerAttribute:3,values:s.raisePositionsToHeight(v,a,!0)})});v=y.position.values;var x=t.union(g,b),w=v.length/3;if(o(a.offsetAttribute)){var M=new Uint8Array(w);if(a.offsetAttribute===f.TOP)M=e(M,1,0,w/2);else{var E=a.offsetAttribute===f.NONE?0:1;M=e(M,E)}y.applyOffset=new c({componentDatatype:r.UNSIGNED_BYTE,componentsPerAttribute:1,values:M})}var L=n(a.numberOfVerticalLines,16);L=p.clamp(L,0,w/2);var O=h.createTypedArray(w,2*w+2*L);w/=2;var S,N,P=0;for(S=0;S<w;++S)O[P++]=S,O[P++]=(S+1)%w,O[P++]=S+w,O[P++]=(S+1)%w+w;if(L>0){var k=Math.min(L,w);N=Math.round(w/k);var j=Math.min(N*L,w);for(S=0;S<j;S+=N)O[P++]=S,O[P++]=S+w}return{boundingSphere:x,attributes:y,indices:O}}(w);else if(x=function(e){var n=e.center;A=i.multiplyByScalar(e.ellipsoid.geodeticSurfaceNormal(n,A),e.height,A),A=i.add(n,A,A);for(var o=new t(A,e.semiMajorAxis),a=s.computeEllipsePositions(e,!1,!0).outerPositions,u=new d({position:new c({componentDatatype:r.DOUBLE,componentsPerAttribute:3,values:s.raisePositionsToHeight(a,e,!1)})}),l=a.length/3,f=h.createTypedArray(l,2*l),p=0,m=0;m<l;++m)f[p++]=m,f[p++]=(m+1)%l;return{boundingSphere:o,attributes:u,indices:f}}(w),o(a._offsetAttribute)){var M=x.attributes.position.values.length,E=new Uint8Array(M/3),L=a._offsetAttribute===f.NONE?0:1;e(E,L),x.attributes.applyOffset=new c({componentDatatype:r.UNSIGNED_BYTE,componentsPerAttribute:1,values:E})}return new l({attributes:x.attributes,indices:x.indices,primitiveType:m.LINES,boundingSphere:x.boundingSphere,offsetAttribute:a._offsetAttribute})}},v});