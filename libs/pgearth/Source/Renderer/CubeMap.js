define(["../Core/Check","../Core/defaultValue","../Core/defined","../Core/defineProperties","../Core/destroyObject","../Core/DeveloperError","../Core/Math","../Core/PixelFormat","./ContextLimits","./CubeMapFace","./MipmapHint","./PixelDatatype","./Sampler","./TextureMagnificationFilter","./TextureMinificationFilter"],function(e,t,i,r,n,_,a,o,s,E,h,p,T,u,l){"use strict";function A(r){r=t(r,t.EMPTY_OBJECT),e.defined("options.context",r.context);var n,a,h=r.context,u=r.source;if(i(u)){var l=[u.positiveX,u.negativeX,u.positiveY,u.negativeY,u.positiveZ,u.negativeZ];if(!(l[0]&&l[1]&&l[2]&&l[3]&&l[4]&&l[5]))throw new _("options.source requires positiveX, negativeX, positiveY, negativeY, positiveZ, and negativeZ faces.");n=l[0].width,a=l[0].height;for(var A=1;A<6;++A)if(Number(l[A].width)!==n||Number(l[A].height)!==a)throw new _("Each face in options.source must have the same width and height.")}else n=r.width,a=r.height;var x=n,g=t(r.pixelFormat,o.RGBA),m=t(r.pixelDatatype,p.UNSIGNED_BYTE);if(!i(n)||!i(a))throw new _("options requires a source field to create an initialized cube map or width and height fields to create a blank cube map.");if(n!==a)throw new _("Width must equal height.");if(x<=0)throw new _("Width and height must be greater than zero.");if(x>s.maximumCubeMapSize)throw new _("Width and height must be less than or equal to the maximum cube map size ("+s.maximumCubeMapSize+").  Check maximumCubeMapSize.");if(!o.validate(g))throw new _("Invalid options.pixelFormat.");if(o.isDepthFormat(g))throw new _("options.pixelFormat cannot be DEPTH_COMPONENT or DEPTH_STENCIL.");if(!p.validate(m))throw new _("Invalid options.pixelDatatype.");if(m===p.FLOAT&&!h.floatingPointTexture)throw new _("When options.pixelDatatype is FLOAT, this WebGL implementation must support the OES_texture_float extension.");if(m===p.HALF_FLOAT&&!h.halfFloatingPointTexture)throw new _("When options.pixelDatatype is HALF_FLOAT, this WebGL implementation must support the OES_texture_half_float extension.");var v=6*o.textureSizeInBytes(g,m,x,x),P=r.preMultiplyAlpha||g===o.RGB||g===o.LUMINANCE,f=t(r.flipY,!0),I=h._gl,c=I.TEXTURE_CUBE_MAP,M=I.createTexture();function U(e,t,r,_){var a=t.arrayBufferView;i(a)||(a=t.bufferView);var s=4;i(a)&&(s=o.alignmentInBytes(g,m,n)),I.pixelStorei(I.UNPACK_ALIGNMENT,s),i(a)?(I.pixelStorei(I.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),I.pixelStorei(I.UNPACK_FLIP_Y_WEBGL,!1),_&&(a=o.flipY(a,g,m,x,x)),I.texImage2D(e,0,g,x,x,0,g,m,a)):(I.pixelStorei(I.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r),I.pixelStorei(I.UNPACK_FLIP_Y_WEBGL,_),I.texImage2D(e,0,g,g,m,t))}I.activeTexture(I.TEXTURE0),I.bindTexture(c,M),i(u)?(U(I.TEXTURE_CUBE_MAP_POSITIVE_X,u.positiveX,P,f),U(I.TEXTURE_CUBE_MAP_NEGATIVE_X,u.negativeX,P,f),U(I.TEXTURE_CUBE_MAP_POSITIVE_Y,u.positiveY,P,f),U(I.TEXTURE_CUBE_MAP_NEGATIVE_Y,u.negativeY,P,f),U(I.TEXTURE_CUBE_MAP_POSITIVE_Z,u.positiveZ,P,f),U(I.TEXTURE_CUBE_MAP_NEGATIVE_Z,u.negativeZ,P,f)):(I.texImage2D(I.TEXTURE_CUBE_MAP_POSITIVE_X,0,g,x,x,0,g,m,null),I.texImage2D(I.TEXTURE_CUBE_MAP_NEGATIVE_X,0,g,x,x,0,g,m,null),I.texImage2D(I.TEXTURE_CUBE_MAP_POSITIVE_Y,0,g,x,x,0,g,m,null),I.texImage2D(I.TEXTURE_CUBE_MAP_NEGATIVE_Y,0,g,x,x,0,g,m,null),I.texImage2D(I.TEXTURE_CUBE_MAP_POSITIVE_Z,0,g,x,x,0,g,m,null),I.texImage2D(I.TEXTURE_CUBE_MAP_NEGATIVE_Z,0,g,x,x,0,g,m,null)),I.bindTexture(c,null),this._context=h,this._textureFilterAnisotropic=h._textureFilterAnisotropic,this._textureTarget=c,this._texture=M,this._pixelFormat=g,this._pixelDatatype=m,this._size=x,this._hasMipmap=!1,this._sizeInBytes=v,this._preMultiplyAlpha=P,this._flipY=f,this._sampler=void 0;var X=i(u);this._positiveX=new E(I,M,c,I.TEXTURE_CUBE_MAP_POSITIVE_X,g,m,x,P,f,X),this._negativeX=new E(I,M,c,I.TEXTURE_CUBE_MAP_NEGATIVE_X,g,m,x,P,f,X),this._positiveY=new E(I,M,c,I.TEXTURE_CUBE_MAP_POSITIVE_Y,g,m,x,P,f,X),this._negativeY=new E(I,M,c,I.TEXTURE_CUBE_MAP_NEGATIVE_Y,g,m,x,P,f,X),this._positiveZ=new E(I,M,c,I.TEXTURE_CUBE_MAP_POSITIVE_Z,g,m,x,P,f,X),this._negativeZ=new E(I,M,c,I.TEXTURE_CUBE_MAP_NEGATIVE_Z,g,m,x,P,f,X),this.sampler=i(r.sampler)?r.sampler:new T}return r(A.prototype,{positiveX:{get:function(){return this._positiveX}},negativeX:{get:function(){return this._negativeX}},positiveY:{get:function(){return this._positiveY}},negativeY:{get:function(){return this._negativeY}},positiveZ:{get:function(){return this._positiveZ}},negativeZ:{get:function(){return this._negativeZ}},sampler:{get:function(){return this._sampler},set:function(e){var t=e.minificationFilter,r=e.magnificationFilter,n=t===l.NEAREST_MIPMAP_NEAREST||t===l.NEAREST_MIPMAP_LINEAR||t===l.LINEAR_MIPMAP_NEAREST||t===l.LINEAR_MIPMAP_LINEAR,_=this._context,a=this._pixelDatatype;(a===p.FLOAT&&!_.textureFloatLinear||a===p.HALF_FLOAT&&!_.textureHalfFloatLinear)&&(t=n?l.NEAREST_MIPMAP_NEAREST:l.NEAREST,r=u.NEAREST);var o=_._gl,s=this._textureTarget;o.activeTexture(o.TEXTURE0),o.bindTexture(s,this._texture),o.texParameteri(s,o.TEXTURE_MIN_FILTER,t),o.texParameteri(s,o.TEXTURE_MAG_FILTER,r),o.texParameteri(s,o.TEXTURE_WRAP_S,e.wrapS),o.texParameteri(s,o.TEXTURE_WRAP_T,e.wrapT),i(this._textureFilterAnisotropic)&&o.texParameteri(s,this._textureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT,e.maximumAnisotropy),o.bindTexture(s,null),this._sampler=e}},pixelFormat:{get:function(){return this._pixelFormat}},pixelDatatype:{get:function(){return this._pixelDatatype}},width:{get:function(){return this._size}},height:{get:function(){return this._size}},sizeInBytes:{get:function(){return this._hasMipmap?Math.floor(4*this._sizeInBytes/3):this._sizeInBytes}},preMultiplyAlpha:{get:function(){return this._preMultiplyAlpha}},flipY:{get:function(){return this._flipY}},_target:{get:function(){return this._textureTarget}}}),A.prototype.generateMipmap=function(e){if(e=t(e,h.DONT_CARE),this._size>1&&!a.isPowerOfTwo(this._size))throw new _("width and height must be a power of two to call generateMipmap().");if(!h.validate(e))throw new _("hint is invalid.");this._hasMipmap=!0;var i=this._context._gl,r=this._textureTarget;i.hint(i.GENERATE_MIPMAP_HINT,e),i.activeTexture(i.TEXTURE0),i.bindTexture(r,this._texture),i.generateMipmap(r),i.bindTexture(r,null)},A.prototype.isDestroyed=function(){return!1},A.prototype.destroy=function(){return this._context._gl.deleteTexture(this._texture),this._positiveX=n(this._positiveX),this._negativeX=n(this._negativeX),this._positiveY=n(this._positiveY),this._negativeY=n(this._negativeY),this._positiveZ=n(this._positiveZ),this._negativeZ=n(this._negativeZ),n(this)},A});