define(["./arrayRemoveDuplicates","./BoundingRectangle","./BoundingSphere","./Cartesian2","./Cartesian3","./ComponentDatatype","./CornerType","./defaultValue","./defined","./DeveloperError","./Ellipsoid","./Geometry","./GeometryAttribute","./GeometryAttributes","./IndexDatatype","./Math","./PolygonPipeline","./PolylineVolumeGeometryLibrary","./PrimitiveType","./WindingOrder"],function(e,r,i,n,t,o,a,s,p,l,c,u,h,d,y,g,v,f,_,m){"use strict";function k(e){var r=(e=s(e,s.EMPTY_OBJECT)).polylinePositions,i=e.shapePositions;if(!p(r))throw new l("options.polylinePositions is required.");if(!p(i))throw new l("options.shapePositions is required.");this._positions=r,this._shape=i,this._ellipsoid=c.clone(s(e.ellipsoid,c.WGS84)),this._cornerType=s(e.cornerType,a.ROUNDED),this._granularity=s(e.granularity,g.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeOutlineGeometry";var o=1+r.length*t.packedLength;o+=1+i.length*n.packedLength,this.packedLength=o+c.packedLength+2}k.pack=function(e,r,i){if(!p(e))throw new l("value is required");if(!p(r))throw new l("array is required");var o;i=s(i,0);var a=e._positions,u=a.length;for(r[i++]=u,o=0;o<u;++o,i+=t.packedLength)t.pack(a[o],r,i);var h=e._shape;for(u=h.length,r[i++]=u,o=0;o<u;++o,i+=n.packedLength)n.pack(h[o],r,i);return c.pack(e._ellipsoid,r,i),i+=c.packedLength,r[i++]=e._cornerType,r[i]=e._granularity,r};var P=c.clone(c.UNIT_SPHERE),w={polylinePositions:void 0,shapePositions:void 0,ellipsoid:P,height:void 0,cornerType:void 0,granularity:void 0};k.unpack=function(e,r,i){if(!p(e))throw new l("array is required");var o;r=s(r,0);var a=e[r++],u=new Array(a);for(o=0;o<a;++o,r+=t.packedLength)u[o]=t.unpack(e,r);a=e[r++];var h=new Array(a);for(o=0;o<a;++o,r+=n.packedLength)h[o]=n.unpack(e,r);var d=c.unpack(e,r,P);r+=c.packedLength;var y=e[r++],g=e[r];return p(i)?(i._positions=u,i._shape=h,i._ellipsoid=c.clone(d,i._ellipsoid),i._cornerType=y,i._granularity=g,i):(w.polylinePositions=u,w.shapePositions=h,w.cornerType=y,w.granularity=g,new k(w))};var E=new r;return k.createGeometry=function(n){var a=n._positions,s=e(a,t.equalsEpsilon),p=n._shape;if(p=f.removeDuplicatesFromShape(p),!(s.length<2||p.length<3)){v.computeWindingOrder2D(p)===m.CLOCKWISE&&p.reverse();var l=r.fromPoints(p,E);return function(e,r){var n=new d;n.position=new h({componentDatatype:o.DOUBLE,componentsPerAttribute:3,values:e});var t,a,s=r.length,p=n.position.values.length/3,l=e.length/3/s,c=y.createTypedArray(p,2*s*(l+1)),g=0,v=(t=0)*s;for(a=0;a<s-1;a++)c[g++]=a+v,c[g++]=a+v+1;for(c[g++]=s-1+v,c[g++]=v,v=(t=l-1)*s,a=0;a<s-1;a++)c[g++]=a+v,c[g++]=a+v+1;for(c[g++]=s-1+v,c[g++]=v,t=0;t<l-1;t++){var f=s*t,m=f+s;for(a=0;a<s;a++)c[g++]=a+f,c[g++]=a+m}return new u({attributes:n,indices:y.createTypedArray(p,c),boundingSphere:i.fromVertices(e),primitiveType:_.LINES})}(f.computePositions(s,p,l,n,!1),p)}},k});