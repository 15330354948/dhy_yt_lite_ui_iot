define(["./BoundingSphere","./Cartesian2","./Cartesian3","./Cartographic","./Check","./defaultValue","./defined","./DeveloperError","./Ellipsoid","./EllipsoidTangentPlane","./Intersect","./Interval","./Math","./Matrix3","./Plane","./Rectangle"],function(e,t,n,a,r,i,o,u,c,l,d,s,h,w,m,f){"use strict";function g(e,t){this.center=n.clone(i(e,n.ZERO)),this.halfAxes=w.clone(i(t,w.ZERO))}g.packedLength=n.packedLength+w.packedLength,g.pack=function(e,t,a){return r.typeOf.object("value",e),r.defined("array",t),a=i(a,0),n.pack(e.center,t,a),w.pack(e.halfAxes,t,a+n.packedLength),t},g.unpack=function(e,t,a){return r.defined("array",e),t=i(t,0),o(a)||(a=new g),n.unpack(e,t,a.center),w.unpack(e,t+n.packedLength,a.halfAxes),a};var x=new n,p=new n,y=new n,M=new n,b=new n,A=new n,O=new w,v={unitary:new w,diagonal:new w};g.fromPoints=function(e,t){if(o(t)||(t=new g),!o(e)||0===e.length)return t.halfAxes=w.ZERO,t.center=n.ZERO,t;var a,r=e.length,i=n.clone(e[0],x);for(a=1;a<r;a++)n.add(i,e[a],i);var u=1/r;n.multiplyByScalar(i,u,i);var c,l=0,d=0,s=0,h=0,m=0,f=0;for(a=0;a<r;a++)l+=(c=n.subtract(e[a],i,p)).x*c.x,d+=c.x*c.y,s+=c.x*c.z,h+=c.y*c.y,m+=c.y*c.z,f+=c.z*c.z;l*=u,d*=u,s*=u,h*=u,m*=u,f*=u;var C=O;C[0]=l,C[1]=d,C[2]=s,C[3]=d,C[4]=h,C[5]=m,C[6]=s,C[7]=m,C[8]=f;var N=w.computeEigenDecomposition(C,v),E=w.clone(N.unitary,t.halfAxes),L=w.getColumn(E,0,M),q=w.getColumn(E,1,b),I=w.getColumn(E,2,A),P=-Number.MAX_VALUE,R=-Number.MAX_VALUE,S=-Number.MAX_VALUE,z=Number.MAX_VALUE,T=Number.MAX_VALUE,U=Number.MAX_VALUE;for(a=0;a<r;a++)c=e[a],P=Math.max(n.dot(L,c),P),R=Math.max(n.dot(q,c),R),S=Math.max(n.dot(I,c),S),z=Math.min(n.dot(L,c),z),T=Math.min(n.dot(q,c),T),U=Math.min(n.dot(I,c),U);L=n.multiplyByScalar(L,.5*(z+P),L),q=n.multiplyByScalar(q,.5*(T+R),q),I=n.multiplyByScalar(I,.5*(U+S),I);var k=n.add(L,q,t.center);n.add(k,I,k);var B=y;return B.x=P-z,B.y=R-T,B.z=S-U,n.multiplyByScalar(B,.5,B),w.multiplyByScale(t.halfAxes,B,t.halfAxes),t};var C=new n,N=new n;var E=new a,L=new n,q=[new a,new a,new a,new a,new a,new a,new a,new a],I=[new n,new n,new n,new n,new n,new n,new n,new n],P=[new t,new t,new t,new t,new t,new t,new t,new t];g.fromRectangle=function(e,t,a,r,d){if(!o(e))throw new u("rectangle is required");if(e.width<0||e.width>h.TWO_PI)throw new u("Rectangle width must be between 0 and 2*pi");if(e.height<0||e.height>h.PI)throw new u("Rectangle height must be between 0 and pi");if(o(r)&&!h.equalsEpsilon(r.radii.x,r.radii.y,h.EPSILON15))throw new u("Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y)");t=i(t,0),a=i(a,0),r=i(r,c.WGS84);var s=f.center(e,E),x=r.cartographicToCartesian(s,L),p=new l(x,r),y=p.plane,M=q[0],b=q[1],A=q[2],O=q[3],v=q[4],R=q[5],S=q[6],z=q[7],T=s.longitude,U=e.south<0&&e.north>0?0:s.latitude;S.latitude=R.latitude=v.latitude=e.south,z.latitude=O.latitude=U,M.latitude=b.latitude=A.latitude=e.north,S.longitude=z.longitude=M.longitude=e.west,R.longitude=b.longitude=T,v.longitude=O.longitude=A.longitude=e.east,A.height=b.height=M.height=z.height=S.height=R.height=v.height=O.height=a,r.cartographicArrayToCartesianArray(q,I),p.projectPointsToNearestOnPlane(I,P);var k=Math.min(P[6].x,P[7].x,P[0].x),B=Math.max(P[2].x,P[3].x,P[4].x),D=Math.min(P[4].y,P[5].y,P[6].y),V=Math.max(P[0].y,P[1].y,P[2].y);return A.height=M.height=v.height=S.height=t,r.cartographicArrayToCartesianArray(q,I),function(e,t,a,r,i,c,l,d){if(!(o(t)&&o(a)&&o(r)&&o(i)&&o(c)&&o(l)))throw new u("all extents (minimum/maximum X/Y/Z) are required.");o(d)||(d=new g);var s=d.halfAxes;w.setColumn(s,0,e.xAxis,s),w.setColumn(s,1,e.yAxis,s),w.setColumn(s,2,e.zAxis,s);var h=C;h.x=(t+a)/2,h.y=(r+i)/2,h.z=(c+l)/2;var m=N;m.x=(a-t)/2,m.y=(i-r)/2,m.z=(l-c)/2;var f=d.center;return h=w.multiplyByVector(s,h,h),n.add(e.origin,h,f),w.multiplyByScale(s,m,s),d}(p,k,B,D,V,Math.min(m.getPointDistance(y,I[0]),m.getPointDistance(y,I[2]),m.getPointDistance(y,I[4]),m.getPointDistance(y,I[6])),a,d)},g.clone=function(e,t){if(o(e))return o(t)?(n.clone(e.center,t.center),w.clone(e.halfAxes,t.halfAxes),t):new g(e.center,e.halfAxes)},g.intersectPlane=function(e,t){if(!o(e))throw new u("box is required.");if(!o(t))throw new u("plane is required.");var a=e.center,r=t.normal,i=e.halfAxes,c=r.x,l=r.y,s=r.z,h=Math.abs(c*i[w.COLUMN0ROW0]+l*i[w.COLUMN0ROW1]+s*i[w.COLUMN0ROW2])+Math.abs(c*i[w.COLUMN1ROW0]+l*i[w.COLUMN1ROW1]+s*i[w.COLUMN1ROW2])+Math.abs(c*i[w.COLUMN2ROW0]+l*i[w.COLUMN2ROW1]+s*i[w.COLUMN2ROW2]),m=n.dot(r,a)+t.distance;return m<=-h?d.OUTSIDE:m>=h?d.INSIDE:d.INTERSECTING};var R=new n,S=new n,z=new n,T=new n;g.distanceSquaredTo=function(e,t){if(!o(e))throw new u("box is required.");if(!o(t))throw new u("cartesian is required.");var a=n.subtract(t,e.center,C),r=e.halfAxes,i=w.getColumn(r,0,R),c=w.getColumn(r,1,S),l=w.getColumn(r,2,z),d=n.magnitude(i),s=n.magnitude(c),h=n.magnitude(l);n.normalize(i,i),n.normalize(c,c),n.normalize(l,l);var m=T;m.x=n.dot(a,i),m.y=n.dot(a,c),m.z=n.dot(a,l);var f,g=0;return m.x<-d?g+=(f=m.x+d)*f:m.x>d&&(g+=(f=m.x-d)*f),m.y<-s?g+=(f=m.y+s)*f:m.y>s&&(g+=(f=m.y-s)*f),m.z<-h?g+=(f=m.z+h)*f:m.z>h&&(g+=(f=m.z-h)*f),g};var U=new n,k=new n;g.computePlaneDistances=function(e,t,a,r){if(!o(e))throw new u("box is required.");if(!o(t))throw new u("position is required.");if(!o(a))throw new u("direction is required.");o(r)||(r=new s);var i=Number.POSITIVE_INFINITY,c=Number.NEGATIVE_INFINITY,l=e.center,d=e.halfAxes,h=w.getColumn(d,0,R),m=w.getColumn(d,1,S),f=w.getColumn(d,2,z),g=n.add(h,m,U);n.add(g,f,g),n.add(g,l,g);var x=n.subtract(g,t,k),p=n.dot(a,x);return i=Math.min(p,i),c=Math.max(p,c),n.add(l,h,g),n.add(g,m,g),n.subtract(g,f,g),n.subtract(g,t,x),p=n.dot(a,x),i=Math.min(p,i),c=Math.max(p,c),n.add(l,h,g),n.subtract(g,m,g),n.add(g,f,g),n.subtract(g,t,x),p=n.dot(a,x),i=Math.min(p,i),c=Math.max(p,c),n.add(l,h,g),n.subtract(g,m,g),n.subtract(g,f,g),n.subtract(g,t,x),p=n.dot(a,x),i=Math.min(p,i),c=Math.max(p,c),n.subtract(l,h,g),n.add(g,m,g),n.add(g,f,g),n.subtract(g,t,x),p=n.dot(a,x),i=Math.min(p,i),c=Math.max(p,c),n.subtract(l,h,g),n.add(g,m,g),n.subtract(g,f,g),n.subtract(g,t,x),p=n.dot(a,x),i=Math.min(p,i),c=Math.max(p,c),n.subtract(l,h,g),n.subtract(g,m,g),n.add(g,f,g),n.subtract(g,t,x),p=n.dot(a,x),i=Math.min(p,i),c=Math.max(p,c),n.subtract(l,h,g),n.subtract(g,m,g),n.subtract(g,f,g),n.subtract(g,t,x),p=n.dot(a,x),i=Math.min(p,i),c=Math.max(p,c),r.start=i,r.stop=c,r};var B=new e;return g.isOccluded=function(t,n){if(!o(t))throw new u("box is required.");if(!o(n))throw new u("occluder is required.");var a=e.fromOrientedBoundingBox(t,B);return!n.isBoundingSphereVisible(a)},g.prototype.intersectPlane=function(e){return g.intersectPlane(this,e)},g.prototype.distanceSquaredTo=function(e){return g.distanceSquaredTo(this,e)},g.prototype.computePlaneDistances=function(e,t,n){return g.computePlaneDistances(this,e,t,n)},g.prototype.isOccluded=function(e){return g.isOccluded(this,e)},g.equals=function(e,t){return e===t||o(e)&&o(t)&&n.equals(e.center,t.center)&&w.equals(e.halfAxes,t.halfAxes)},g.prototype.clone=function(e){return g.clone(this,e)},g.prototype.equals=function(e){return g.equals(this,e)},g});