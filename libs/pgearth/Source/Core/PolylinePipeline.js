define(["./Cartesian3","./Cartographic","./defaultValue","./defined","./DeveloperError","./Ellipsoid","./EllipsoidGeodesic","./EllipsoidRhumbLine","./IntersectionTests","./isArray","./Math","./Matrix4","./Plane"],function(r,e,a,n,t,i,o,c,s,u,l,h,f){"use strict";var g={numberOfPoints:function(e,a,n){var t=r.distance(e,a);return Math.ceil(t/n)},numberOfPointsRhumbLine:function(r,e,a){var n=Math.pow(r.longitude-e.longitude,2)+Math.pow(r.latitude-e.latitude,2);return Math.ceil(Math.sqrt(n/(a*a)))}},p=new e;g.extractHeights=function(r,e){for(var a=r.length,n=new Array(a),t=0;t<a;t++){var i=r[t];n[t]=e.cartesianToCartographic(i,p).height}return n};var v=new h,d=new r,m=new r,w=new f(r.UNIT_X,0),T=new r,y=new f(r.UNIT_X,0),P=new r,C=new r,A=[];function S(r,e,a){var n,t=A;if(t.length=r,e===a){for(n=0;n<r;n++)t[n]=e;return t}var i=(a-e)/r;for(n=0;n<r;n++){var o=e+n*i;t[n]=o}return t}var E=new e,R=new e,D=new r,b=new r,G=new r,N=new o,I=new c;function k(e,a,n,t,i,o,c,s){var u=t.scaleToGeodeticSurface(e,b),l=t.scaleToGeodeticSurface(a,G),h=g.numberOfPoints(e,a,n),f=t.cartesianToCartographic(u,E),p=t.cartesianToCartographic(l,R),v=S(h,i,o);N.setEndPoints(f,p);var d=N.surfaceDistance/h,m=s;f.height=i;var w=t.cartographicToCartesian(f,D);r.pack(w,c,m),m+=3;for(var T=1;T<h;T++){var y=N.interpolateUsingSurfaceDistance(T*d,R);y.height=v[T],w=t.cartographicToCartesian(y,D),r.pack(w,c,m),m+=3}return m}function _(e,a,n,t,i,o,s,u){var l=t.scaleToGeodeticSurface(e,b),h=t.scaleToGeodeticSurface(a,G),f=t.cartesianToCartographic(l,E),p=t.cartesianToCartographic(h,R),v=g.numberOfPointsRhumbLine(f,p,n),d=S(v,i,o);I.ellipsoid.equals(t)||(I=new c(void 0,void 0,t)),I.setEndPoints(f,p);var m=I.surfaceDistance/v,w=u;f.height=i;var T=t.cartographicToCartesian(f,D);r.pack(T,s,w),w+=3;for(var y=1;y<v;y++){var P=I.interpolateUsingSurfaceDistance(y*m,R);P.height=d[y],T=t.cartographicToCartesian(P,D),r.pack(T,s,w),w+=3}return w}g.wrapLongitude=function(e,t){var i=[],o=[];if(n(e)&&e.length>0){t=a(t,h.IDENTITY);var c=h.inverseTransformation(t,v),u=h.multiplyByPoint(c,r.ZERO,d),l=r.normalize(h.multiplyByPointAsVector(c,r.UNIT_Y,m),m),g=f.fromPointNormal(u,l,w),p=r.normalize(h.multiplyByPointAsVector(c,r.UNIT_X,T),T),A=f.fromPointNormal(u,p,y),S=1;i.push(r.clone(e[0]));for(var E=i[0],R=e.length,D=1;D<R;++D){var b=e[D];if(f.getPointDistance(A,E)<0||f.getPointDistance(A,b)<0){var G=s.lineSegmentPlane(E,b,g,P);if(n(G)){var N=r.multiplyByScalar(l,5e-9,C);f.getPointDistance(g,E)<0&&r.negate(N,N),i.push(r.add(G,N,new r)),o.push(S+1),r.negate(N,N),i.push(r.add(G,N,new r)),S=1}}i.push(r.clone(e[D])),S++,E=b}o.push(S)}return{positions:i,lengths:o}},g.generateArc=function(e){n(e)||(e={});var o=e.positions;if(!n(o))throw new t("options.positions is required.");var c=o.length,s=a(e.ellipsoid,i.WGS84),h=a(e.height,0),f=u(h);if(c<1)return[];if(1===c){var p=s.scaleToGeodeticSurface(o[0],b);if(0!==(h=f?h[0]:h)){var v=s.geodeticSurfaceNormal(p,D);r.multiplyByScalar(v,h,v),r.add(p,v,p)}return[p.x,p.y,p.z]}var d=e.minDistance;if(!n(d)){var m=a(e.granularity,l.RADIANS_PER_DEGREE);d=l.chordLength(m,s.maximumRadius)}var w,T=0;for(w=0;w<c-1;w++)T+=g.numberOfPoints(o[w],o[w+1],d);var y=3*(T+1),P=new Array(y),C=0;for(w=0;w<c-1;w++){C=k(o[w],o[w+1],d,s,f?h[w]:h,f?h[w+1]:h,P,C)}A.length=0;var S=o[c-1],R=s.cartesianToCartographic(S,E);R.height=f?h[c-1]:h;var G=s.cartographicToCartesian(R,D);return r.pack(G,P,y-3),P};var M=new e,O=new e;return g.generateRhumbArc=function(o){n(o)||(o={});var c=o.positions;if(!n(c))throw new t("options.positions is required.");var s=c.length,h=a(o.ellipsoid,i.WGS84),f=a(o.height,0),p=u(f);if(s<1)return[];if(1===s){var v=h.scaleToGeodeticSurface(c[0],b);if(0!==(f=p?f[0]:f)){var d=h.geodeticSurfaceNormal(v,D);r.multiplyByScalar(d,f,d),r.add(v,d,v)}return[v.x,v.y,v.z]}var m,w,T=a(o.granularity,l.RADIANS_PER_DEGREE),y=0,P=h.cartesianToCartographic(c[0],M);for(m=0;m<s-1;m++)w=h.cartesianToCartographic(c[m+1],O),y+=g.numberOfPointsRhumbLine(P,w,T),P=e.clone(w,M);var C=3*(y+1),S=new Array(C),R=0;for(m=0;m<s-1;m++){R=_(c[m],c[m+1],T,h,p?f[m]:f,p?f[m+1]:f,S,R)}A.length=0;var G=c[s-1],N=h.cartesianToCartographic(G,E);N.height=p?f[s-1]:f;var I=h.cartographicToCartesian(N,D);return r.pack(I,S,C-3),S},g.generateCartesianArc=function(e){for(var a=g.generateArc(e),n=a.length/3,t=new Array(n),i=0;i<n;i++)t[i]=r.unpack(a,3*i);return t},g.generateCartesianRhumbArc=function(e){for(var a=g.generateRhumbArc(e),n=a.length/3,t=new Array(n),i=0;i<n;i++)t[i]=r.unpack(a,3*i);return t},g});