define(["../Core/Cartesian3","../Core/defaultValue","../Core/defined","../Core/defineProperties","../Core/Ellipsoid","../Core/Event","../Core/Matrix3","../Core/Quaternion","../Core/Transforms","./Property","./VelocityVectorProperty"],function(t,i,e,o,n,r,s,l,c,d,p){"use strict";function a(t,e){this._velocityVectorProperty=new p(t,!0),this._subscription=void 0,this._ellipsoid=void 0,this._definitionChanged=new r,this.ellipsoid=i(e,n.WGS84);var o=this;this._velocityVectorProperty.definitionChanged.addEventListener(function(){o._definitionChanged.raiseEvent(o)})}o(a.prototype,{isConstant:{get:function(){return d.isConstant(this._velocityVectorProperty)}},definitionChanged:{get:function(){return this._definitionChanged}},position:{get:function(){return this._velocityVectorProperty.position},set:function(t){this._velocityVectorProperty.position=t}},ellipsoid:{get:function(){return this._ellipsoid},set:function(t){this._ellipsoid!==t&&(this._ellipsoid=t,this._definitionChanged.raiseEvent(this))}}});var h=new t,u=new t,f=new s;return a.prototype.getValue=function(t,i){var o=this._velocityVectorProperty._getValue(t,u,h);if(e(o))return c.rotationMatrixFromPositionVelocity(h,o,this._ellipsoid,f),l.fromRotationMatrix(f,i)},a.prototype.equals=function(t){return this===t||t instanceof a&&d.equals(this._velocityVectorProperty,t._velocityVectorProperty)&&(this._ellipsoid===t._ellipsoid||this._ellipsoid.equals(t._ellipsoid))},a});