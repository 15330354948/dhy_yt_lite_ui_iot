define(["../Core/defaultValue","../Core/defined","../Core/defineProperties","../Core/FeatureDetection","../Core/VertexFormat","../Shaders/Appearances/PolylineMaterialAppearanceVS","../Shaders/PolylineCommon","../Shaders/PolylineFS","./Appearance","./Material"],function(e,r,t,a,n,o,i,S,s,u){"use strict";var c=i+"\n"+o,d=S;function h(t){t=e(t,e.EMPTY_OBJECT);var a=e(t.translucent,!0),n=h.VERTEX_FORMAT;this.material=r(t.material)?t.material:u.fromType(u.ColorType),this.translucent=a,this._vertexShaderSource=e(t.vertexShaderSource,c),this._fragmentShaderSource=e(t.fragmentShaderSource,d),this._renderState=s.getDefaultRenderState(a,!1,t.renderState),this._closed=!1,this._vertexFormat=n}return a.isInternetExplorer()||(c="#define CLIP_POLYLINE \n"+c),t(h.prototype,{vertexShaderSource:{get:function(){var e=this._vertexShaderSource;return-1!==this.material.shaderSource.search(/varying\s+float\s+v_polylineAngle;/g)&&(e="#define POLYLINE_DASH\n"+e),e}},fragmentShaderSource:{get:function(){return this._fragmentShaderSource}},renderState:{get:function(){return this._renderState}},closed:{get:function(){return this._closed}},vertexFormat:{get:function(){return this._vertexFormat}}}),h.VERTEX_FORMAT=n.POSITION_AND_ST,h.prototype.getFragmentShaderSource=s.prototype.getFragmentShaderSource,h.prototype.isTranslucent=s.prototype.isTranslucent,h.prototype.getRenderState=s.prototype.getRenderState,h});