define(["./Cartesian3","./Cartesian4","./defaultValue","./defined","./defineProperties","./DeveloperError","./LinearSpline","./Matrix4","./Spline","./TridiagonalSystemSolver"],function(t,e,n,i,r,a,s,l,o,h){"use strict";var g=[],u=[],p=[],m=[];function w(t){var e=(t=n(t,n.EMPTY_OBJECT)).points,r=t.times,s=t.inTangents,l=t.outTangents;if(!(i(e)&&i(r)&&i(s)&&i(l)))throw new a("times, points, inTangents, and outTangents are required.");if(e.length<2)throw new a("points.length must be greater than or equal to 2.");if(r.length!==e.length)throw new a("times.length must be equal to points.length.");if(s.length!==l.length||s.length!==e.length-1)throw new a("inTangents and outTangents must have a length equal to points.length - 1.");this._times=r,this._points=e,this._inTangents=s,this._outTangents=l,this._lastTimeIndex=0}r(w.prototype,{times:{get:function(){return this._times}},points:{get:function(){return this._points}},inTangents:{get:function(){return this._inTangents}},outTangents:{get:function(){return this._outTangents}}}),w.createC1=function(t){var e=(t=n(t,n.EMPTY_OBJECT)).times,r=t.points,s=t.tangents;if(!i(r)||!i(e)||!i(s))throw new a("points, times and tangents are required.");if(r.length<2)throw new a("points.length must be greater than or equal to 2.");if(e.length!==r.length||e.length!==s.length)throw new a("times, points and tangents must have the same length.");var l=s.slice(0,s.length-1);return new w({times:e,points:r,inTangents:s.slice(1,s.length),outTangents:l})},w.createNaturalCubic=function(e){var r=(e=n(e,n.EMPTY_OBJECT)).times,l=e.points;if(!i(l)||!i(r))throw new a("points and times are required.");if(l.length<2)throw new a("points.length must be greater than or equal to 2.");if(r.length!==l.length)throw new a("times.length must be equal to points.length.");if(l.length<3)return new s({points:l,times:r});var o=function(e){var n,r=g,a=p,s=u,l=m;r.length=a.length=e.length-1,s.length=l.length=e.length,r[0]=a[0]=1,s[0]=2;var o=l[0];for(i(o)||(o=l[0]=new t),t.subtract(e[1],e[0],o),t.multiplyByScalar(o,3,o),n=1;n<r.length;++n)r[n]=a[n]=1,s[n]=4,o=l[n],i(o)||(o=l[n]=new t),t.subtract(e[n+1],e[n-1],o),t.multiplyByScalar(o,3,o);return s[n]=2,o=l[n],i(o)||(o=l[n]=new t),t.subtract(e[n],e[n-1],o),t.multiplyByScalar(o,3,o),h.solve(r,s,a,l)}(l),c=o.slice(0,o.length-1);return new w({times:r,points:l,inTangents:o.slice(1,o.length),outTangents:c})},w.createClampedCubic=function(e){var r=(e=n(e,n.EMPTY_OBJECT)).times,l=e.points,o=e.firstTangent,c=e.lastTangent;if(!(i(l)&&i(r)&&i(o)&&i(c)))throw new a("points, times, firstTangent and lastTangent are required.");if(l.length<2)throw new a("points.length must be greater than or equal to 2.");if(r.length!==l.length)throw new a("times.length must be equal to points.length.");if(l.length<3)return new s({points:l,times:r});var T=function(e,n,r){var a,s=g,l=p,o=u,w=m;s.length=l.length=e.length-1,o.length=w.length=e.length,s[0]=o[0]=1,l[0]=0;var c=w[0];for(i(c)||(c=w[0]=new t),t.clone(n,c),a=1;a<s.length-1;++a)s[a]=l[a]=1,o[a]=4,c=w[a],i(c)||(c=w[a]=new t),t.subtract(e[a+1],e[a-1],c),t.multiplyByScalar(c,3,c);return s[a]=0,l[a]=1,o[a]=4,c=w[a],i(c)||(c=w[a]=new t),t.subtract(e[a+1],e[a-1],c),t.multiplyByScalar(c,3,c),o[a+1]=1,c=w[a+1],i(c)||(c=w[a+1]=new t),t.clone(r,c),h.solve(s,o,l,w)}(l,o,c),f=T.slice(0,T.length-1);return new w({times:r,points:l,inTangents:T.slice(1,T.length),outTangents:f})},w.hermiteCoefficientMatrix=new l(2,-3,0,1,-2,3,0,0,1,-2,1,0,1,-1,0,0),w.prototype.findTimeInterval=o.prototype.findTimeInterval;var c=new e,T=new t;return w.prototype.wrapTime=o.prototype.wrapTime,w.prototype.clampTime=o.prototype.clampTime,w.prototype.evaluate=function(e,n){i(n)||(n=new t);var r=this.points,a=this.times,s=this.inTangents,o=this.outTangents,h=this._lastTimeIndex=this.findTimeInterval(e,this._lastTimeIndex),g=(e-a[h])/(a[h+1]-a[h]),u=c;u.z=g,u.y=g*g,u.x=u.y*g,u.w=1;var p=l.multiplyByVector(w.hermiteCoefficientMatrix,u,u);return n=t.multiplyByScalar(r[h],p.x,n),t.multiplyByScalar(r[h+1],p.y,T),t.add(n,T,n),t.multiplyByScalar(o[h],p.z,T),t.add(n,T,n),t.multiplyByScalar(s[h],p.w,T),t.add(n,T,n)},w});